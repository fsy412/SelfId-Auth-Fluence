/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.1-231
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


function missingFields(obj: any, fields: string[]): string[] {
    return fields.filter(f => !(f in obj))
}

// Services

export interface AuthServiceDef {
    add_permission: (did: string, callParams: CallParams<'did'>) => { err_msg: string; ret_code: number };
auth: (did: string, callParams: CallParams<'did'>) => boolean;
get_permission_list: (callParams: CallParams<null>) => { dids: string[]; err_msg: string; ret_code: number };
remove_permission: (did: string, callParams: CallParams<'did'>) => { err_msg: string; ret_code: number };
}

export function registerAuthService(serviceId: string, service: AuthServiceDef): void;
export function registerAuthService(peer: FluencePeer, serviceId: string, service: AuthServiceDef): void;
export function registerAuthService(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } 

    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

    const incorrectServiceDefinitions = missingFields(service, ['add_permission', 'auth', 'get_permission_list', 'remove_permission']);
    if (!!incorrectServiceDefinitions.length) {
        throw new Error("Error registering service AuthService: missing functions: " + incorrectServiceDefinitions.map((d) => "'" + d + "'").join(", "))
    }

    peer.internals.callServiceHandler.use((req, resp, next) => {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }

        if (req.fnName === 'add_permission') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    did: req.tetraplets[0]
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.add_permission(req.args[0], callParams)
        }

if (req.fnName === 'auth') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    did: req.tetraplets[0]
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.auth(req.args[0], callParams)
        }

if (req.fnName === 'get_permission_list') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.get_permission_list(callParams)
        }

if (req.fnName === 'remove_permission') {
            const callParams = {
                ...req.particleContext,
                tetraplets: {
                    did: req.tetraplets[0]
                },
            };
            resp.retCode = ResultCodes.success;
            resp.result = service.remove_permission(req.args[0], callParams)
        }

        next();
    });
}
      
// Functions

export function add_permission(did: string, node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ err_msg: string; ret_code: number }>;
export function add_permission(peer: FluencePeer, did: string, node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ err_msg: string; ret_code: number }>;
export function add_permission(...args: any) {
    let peer: FluencePeer;
    let did: any;
    let node_id: any;
    let service_id: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        did = args[1];
        node_id = args[2];
        service_id = args[3];
        config = args[4];
    } else {
        peer = Fluence.getPeer();
        did = args[0];
        node_id = args[1];
        service_id = args[2];
        config = args[3];
    }

    let request: RequestFlow;
    const promise = new Promise<{ err_msg: string; ret_code: number }>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "did") [] did)
                           )
                           (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call node_id (service_id "add_permission") [did] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'did', () => {return did;});
                    h.on('getDataSrv', 'node_id', () => {return node_id;});
                    h.on('getDataSrv', 'service_id', () => {return service_id;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for add_permission');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}


export function get_permission_list(node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ dids: string[]; err_msg: string; ret_code: number }>;
export function get_permission_list(peer: FluencePeer, node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ dids: string[]; err_msg: string; ret_code: number }>;
export function get_permission_list(...args: any) {
    let peer: FluencePeer;
    let node_id: any;
    let service_id: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        node_id = args[1];
        service_id = args[2];
        config = args[3];
    } else {
        peer = Fluence.getPeer();
        node_id = args[0];
        service_id = args[1];
        config = args[2];
    }

    let request: RequestFlow;
    const promise = new Promise<{ dids: string[]; err_msg: string; ret_code: number }>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call node_id (service_id "get_permission_list") [] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'node_id', () => {return node_id;});
                    h.on('getDataSrv', 'service_id', () => {return service_id;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for get_permission_list');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}


export function remove_permission(did: string, node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ err_msg: string; ret_code: number }>;
export function remove_permission(peer: FluencePeer, did: string, node_id: string, service_id: string, config?: {ttl?: number}) : Promise<{ err_msg: string; ret_code: number }>;
export function remove_permission(...args: any) {
    let peer: FluencePeer;
    let did: any;
    let node_id: any;
    let service_id: any;
    let config: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
        did = args[1];
        node_id = args[2];
        service_id = args[3];
        config = args[4];
    } else {
        peer = Fluence.getPeer();
        did = args[0];
        node_id = args[1];
        service_id = args[2];
        config = args[3];
    }

    let request: RequestFlow;
    const promise = new Promise<{ err_msg: string; ret_code: number }>((resolve, reject) => {
        const r = new RequestFlowBuilder()
                .disableInjections()
                .withRawScript(`
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "did") [] did)
                           )
                           (call %init_peer_id% ("getDataSrv" "node_id") [] node_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (xor
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call node_id (service_id "remove_permission") [did] res)
                         )
                         (seq
                          (call -relay- ("op" "noop") [])
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                         )
                        )
                       )
                       (call -relay- ("op" "noop") [])
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
                `,
                )
                .configHandler((h) => {
                    h.on('getDataSrv', '-relay-', () => {
                        return peer.getStatus().relayPeerId;
                    });
                    h.on('getDataSrv', 'did', () => {return did;});
                    h.on('getDataSrv', 'node_id', () => {return node_id;});
                    h.on('getDataSrv', 'service_id', () => {return service_id;});
                    h.onEvent('callbackSrv', 'response', (args) => {
                        const [res] = args;
                        resolve(res);
                    });
                    h.onEvent('errorHandlingSrv', 'error', (args) => {
                        const [err] = args;
                        reject(err);
                    });
                })
                .handleScriptError(reject)
                .handleTimeout(() => {
                    reject('Request timed out for remove_permission');
                })

                if (config && config.ttl) {
                    r.withTTL(config.ttl)
                }

                request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
